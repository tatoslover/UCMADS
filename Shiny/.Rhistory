sets2021[sets2021$setID == 783, ]
sets2013 <- brickset::getSets(2013)
teste <- merge(JB_WrongIDs, sets2013, by = "setID", all.x = "True")
teste
JB_WrongIDs <- JB[JB$setID %in% c(Data_themeIDs$setID,
Data_nameIDs$setID,
Data_yearIDs$setID,
Data_piecesIDs$setID,
Data_RRPIDs$setID,
Data_minifigsIDs$setID,
Data_subthemeIDs$setID
), ]
nrow(JB_WrongIDs) # JB contains 2099 incorrect setIDs
mismatch_flag(Data, "subtheme") # 527 conflicts
Data_themeIDs
manual_check(DsMP, JB, Data_themematch)
manual_check(DsMP, JB, Data_themematch)
Data_themematch
manual_check(manual_check(DsMP, JB, Data_themematch$setID))
Data_themematch$setID
[Data_themematch$setID, ]
[Data_themematch$setID]
[Data_themematch$setID, ]
Data_themematch$setID
manual_check(DsMP, JB, Data_themematch$setID)
head(manual_check(DsMP, JB, Data_themematch$setID))
nrow(manual_check(DsMP, JB, Data_themematch$setID))
Data_themematch
Data_themeIDs
themecheck <- manual_check(DsMP, JB, Data_themematch$setID)
themecheck
possible_matches <- JB[JB$setID %in% c(Data_themematch$setID,
Data_namematch$setID,
Data_yearematch$setID,
Data_piecesematch$setID,
Data_RRPmatch$setID,
Data_minifigsmatch$setID,
Data_subthemematch$setID
), ]
nrow(possible_matches)
possible_matches
check <- manual_check(DsMP, JB, possible_matches$setID)
check
check[, c("setID", "name.x", "name.y")]
mismatch_flag(DsMP, "theme")
mismatch_flag(Data, "theme")
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "theme"))
mismatch_flag(Data, "theme") # No conflicts
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "theme"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "theme"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "name"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "year"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "pieces"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "RRP"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "minifigs"))
Data <- manual_update(Data, DsMP, mismatch_flag(Data, "subtheme"))
mismatch_flag(Data, "theme") # No conflicts
mismatch_flag(Data, "name") # No conflicts
mismatch_flag(Data, "year") # No conflicts
mismatch_flag(Data, "pieces") # No conflicts
mismatch_flag(Data, "RRP") # No conflicts
mismatch_flag(Data, "minifigs") # No conflicts
mismatch_flag(Data, "subtheme") # No conflicts
install.packages(c("brew", "DBI", "fpc", "future", "future.apply", "magick", "mgcv", "mlr3", "mlr3learners", "mlr3viz", "recipes", "rJava", "s2", "sf", "terra", "timeDate", "vcd", "yulab.utils"))
install.packages("rJava")
install.packages("rJava")
shiny::runApp('UC/23S3/DATA601/Code/Shiny')
LegoThemes <- "https://en.wikipedia.org/wiki/List_of_Lego_themes"
html <- read_html(LegoThemes)
library(rvest)
html <- read_html(LegoThemes)
table <- html %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
df <- as.data.frame(table)
table
table[1]
table[2]
html
dfs <- lapply(tables, as.data.frame)
tables <- html[[1]] %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
tables <- html[[2]] %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
tables <- html %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
tables
dfs <- lapply(tables, as.data.frame)
combined_df <- bind_rows(dfs)
library(dplyr)
combined_df <- bind_rows(dfs)
combined_df
head(combined_df)
head(themesCategorised)
themesCategorised <- bind_rows(dfs)
head(themesCategorised)
themesCategorised <- themesCategorised %>% select(Name, Licensed)
head(themesCategorised)
themesCategorised
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(name = str_replace(name, "\\[\\d+\\]", ""))
library(stringr)
themesCategorised <- themesCategorised %>%
mutate(name = str_replace(name, "\\[\\d+\\]", ""))
themesCategorised <- themesCategorised %>%
mutate(name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised$Name
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised$Name
themesCategorised$Licensed
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego", Licensed) ~ "Original",
grepl("Lego, .*", Licensed) ~ "Combo",
TRUE ~ "Licensed"
))
themesCategorised$Licensed
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised$Licensed
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego,?\\s?.*", Licensed) ~ "Combo",
grepl("Lego", Licensed) ~ "Original",
TRUE ~ "Licensed"
))
themesCategorised$Licensed
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised$Licensed
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego", Licensed) ~ "Original",
grepl("Lego,?\\s?.*", Licensed) ~ "Combo",
TRUE ~ "Licensed"
))
themesCategorised$Licensed
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised$Licensed
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego$", Licensed) ~ "Original",
grepl("Lego,?\\s?.*", Licensed) ~ "Combo",
TRUE ~ "Licensed"
))
themesCategorised$Licensed
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace(Name, "\\[\\d+\\]", ""))
themesCategorised$Name
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace_all(Name, "\\[\\d+\\]", ""))
themesCategorised$Name
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego$", Licensed) ~ "Original",
grepl("Lego,?\\s?.*", Licensed) ~ "Combo",
TRUE ~ "Licensed"
)) # Categorising into licensed, combo, and original
themesCategorised
library(readr)
library(remotes)
library(rvest)
library(dplyr)
library(openxlsx)
library(tidyr)
library(readr)
library(remotes)
library(rvest)
library(dplyr)
library(openxlsx)
library(tidyr)
convert_to_integer <- function(df, columns) {
mutate(df, across(all_of(columns), as.integer))
}
data("legosets", package = "brickset")
JB_raw <- legosets
JB <- JB_raw
## Cleaning the data
names(JB)[names(JB) == "US_retailPrice"] <- "RRP"
JB <- JB %>%
select(-matches("URL"),
-starts_with(c("UK_", "CA_", "DE_", "US_")),
-matches("released"))
JB <- JB %>%
mutate(
packagingType = na_if(packagingType, "{Not specified}"),
availability = na_if(availability, "{Not specified}"),
rating = na_if(rating, 0)
)
JB$setID <- as.character(JB$setID)
parent_directory <- "/Users/samuellove/Documents/UC/23S3/DATA601/Data/Dobrynskaya"
names <- list.files(path = parent_directory,
pattern = '\\.xlsx$',
full.names = TRUE)
D15_raw <- read.xlsx(names[3], detectDates = TRUE) # Whole sample (2015 yearly average)
D18_raw <- read.xlsx(names[4], detectDates = TRUE) # Whole sample (1/18 to 4/19 monthly average)
D15 <- D15_raw[, 1:9]
D18 <- D18_raw
## Changing columns to align with JB
name_mapping <- c("id", "year.of.release", "#.of.pieces", "#.of.minifigures")
new_names <- c("setID", "year", "pieces", "minifigs")
matching_positions_D15 <- match(names(D15), name_mapping)
matching_positions_D18 <- match(names(D18), name_mapping)
names(D15)[!is.na(matching_positions_D15)] <- new_names[matching_positions_D15[!is.na(matching_positions_D15)]]
names(D18)[!is.na(matching_positions_D18)] <- new_names[matching_positions_D18[!is.na(matching_positions_D18)]]
D15 <- convert_to_integer(D15, c("year", "pieces", "minifigs"))
D18 <- convert_to_integer(D18, c("year", "pieces", "minifigs"))
## Generating yearly average prices
months18 <- c("2018-01-01",
"2018-02-01",
"2018-03-01",
"2018-04-01",
"2018-05-01",
"2018-06-01",
"2018-07-01",
"2018-08-01",
"2018-09-01",
"2018-10-01",
"2018-11-01",
"2018-12-01")
months19 <- c("2019-01-01",
"2019-02-01",
"2019-03-01",
"2019-04-01")
D18[, months18] <- sapply(D18[, months18], as.numeric)
D18$price2018 <- round(rowMeans(D18[, months18], na.rm = TRUE), 2)
D18[, months19] <- sapply(D18[, months19], as.numeric)
D18$price2019 <- round(rowMeans(D18[, months19], na.rm = TRUE), 2)
## Tidying columns
names(D15)[names(D15) == "Secondary.market.prices.of.new.sets.in.2015"] <- "price2015"
names(D15)[names(D15) == "Primary.market.price.at.release"] <- "RRP"
D15 <- D15 %>%
select(-matches("Secondary"))
D18 <- D18 %>%
select(-matches("-"))
D15$price2015 <- ifelse(D15$price2015 == 0, NA, D15$price2015)
D18$price2018 <- ifelse(D18$price2018 == 0, NA, D18$price2018)
D18$price2019 <- ifelse(D18$price2019 == 0, NA, D18$price2019)
## Fixing mismatched ID
# mismatch_IDs(D15, D18) # 1 conflict
D18$setID <- sub("^COMCON033$", "COMCON", D18$setID)
MP_raw <- read_csv("/Users/samuellove/Documents/UC/23S3/DATA601/Data/Kaggle/lego-sets.csv")
MP <- MP_raw
## Changing columns to align with JB
names(MP)[names(MP) == c("id", "parts", "mean_price")] <- c("setID", "pieces", "price2022")
MP <- convert_to_integer(MP, c("year", "pieces"))
## Removing superfluous variables
MP <- MP %>%
select(-matches("_"))
## Expanding the themes aligning with JB
MP <- MP %>%
separate(category, into = c("theme", "subtheme"), sep = " > ", extra = "merge", fill = "right")
## Fixing setIDs
MP$setID <- sub("-1.*$", "", MP$setID)
## Tidying columns
MP$price2022 <- ifelse(MP$price2022 == 0, NA, MP$price2022)
## Joining D15 and D18 into Ds
Ds = merge(D15, D18, all = TRUE)
## Joining Ds and MP into DsMP
DsMP = merge(Ds, MP, all = TRUE)
## Joining DsMP and JB into Merged
Merged = merge(DsMP, JB, all = TRUE)
Merged$price2015_adj <- Merged$price2015 * 1.23
Merged$price2018_adj <- Merged$price2018 * 1.17
Merged$price2019_adj <- Merged$price2019 * 1.14
head(Merged)
LegoThemes <- "https://en.wikipedia.org/wiki/List_of_Lego_themes" # We can scrape the table from Wikipedia
html <- read_html(LegoThemes)
tables <- html %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
dfs <- lapply(tables, as.data.frame)
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace_all(Name, "\\[\\d+\\]", "")) # Tidying names
library(stringr)
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace_all(Name, "\\[\\d+\\]", "")) # Tidying names
themesCategorised <- themesCategorised %>%
mutate(Licensed = case_when(
grepl("Lego$", Licensed) ~ "Original",
grepl("Lego,?\\s?.*", Licensed) ~ "Combo",
TRUE ~ "Licensed"
)) # Categorising into licensed, combo, and original
themesCategorised
head(Merged)
sum(Merged$theme %in% themesCategorised$name)
sum(Merged$themeGroup %in% themesCategorised$name)
sum(Merged$subtheme %in% themesCategorised$name)
sum(Merged$theme %in% themesCategorised$name)
themesCategorised$name
themesCategorised$Name
sum(Merged$theme %in% themesCategorised$Name)
sum(Merged$themeGroup %in% themesCategorised$Name)
sum(Merged$subtheme %in% themesCategorised$Name)
Merged$theme
themesCategorised$Name
Merged$theme
distinct(Merged$theme)
unique(Merged$theme)
themesCategorised$Name
themesCategorised$Name <- sub("^Lego ", "", themesCategorised$Name)
themesCategorised$Name
sum(Merged$theme %in% themesCategorised$Name)
sum(Merged$subtheme %in% themesCategorised$Name)
sum(Merged$themeGroup %in% themesCategorised$Name)
head(Merged)
shiny::runApp('UC/23S3/DATA601/Code/Shiny')
Merged <- left_join(merged, themesCategorised, by = "common_key")
Merged <- left_join(Merged, themesCategorised, by = "common_key")
themesCategorised <- themesCategorised %>%
rename(theme = Name)
Merged <- left_join(Merged, themesCategorised, by = "theme")
Merged$category
Merged$Licensed
Merged = merge(DsMP, JB, all = TRUE)
Merged$price2015_adj <- Merged$price2015 * 1.23
Merged$price2018_adj <- Merged$price2018 * 1.17
Merged$price2019_adj <- Merged$price2019 * 1.14
names(Merged)
Merged <- left_join(Merged, themesCategorised, by = "theme", relationship = "many-to-many")
names(Merged)
write.csv(Merged, "Merged", row.names = FALSE)
getwd()
runApp('UC/23S3/DATA601/Code/Shiny')
LegoThemes <- "https://en.wikipedia.org/wiki/List_of_Lego_themes" # We can scrape the table from Wikipedia
html <- read_html(LegoThemes)
library(dplyr)
library(openxlsx)
library(readr)
library(remotes)
library(rvest)
library(stringr)
library(tidyr)
##
##
## Generic functions
##
##
drop_cols <- function(df, columns_to_drop) {
# Drop columns (can be a list) from a dataframe
df <- df[, !(colnames(df) %in% columns_to_drop)]
return(df)
}
convert_to_integer <- function(df, columns) {
mutate(df, across(all_of(columns), as.integer))
}
##
##
## jbryer/brickset
##
##
# Loading JB
# remotes::install_github("jbryer/brickset")
data("legosets", package = "brickset")
JB_raw <- legosets
JB <- JB_raw
## Cleaning JB
names(JB)[names(JB) == "US_retailPrice"] <- "RRP"
JB <- JB %>%
select(-matches("URL"),
-starts_with(c("UK_", "CA_", "DE_", "US_")),
-matches("released"))
JB <- JB %>%
mutate(
packagingType = na_if(packagingType, "{Not specified}"),
availability = na_if(availability, "{Not specified}"),
rating = na_if(rating, 0)
)
JB$setID <- as.character(JB$setID)
##
##
## Dobrynskaya
##
##
## Loading D15 & D18
parent_directory <- "/Users/samuellove/Documents/UC/23S3/DATA601/Data/Dobrynskaya"
names <- list.files(path = parent_directory,
pattern = '\\.xlsx$',
full.names = TRUE)
D15_raw <- read.xlsx(names[3], detectDates = TRUE) # Whole sample (2015 yearly average)
D18_raw <- read.xlsx(names[4], detectDates = TRUE) # Whole sample (1/18 to 4/19 monthly average)
D15 <- D15_raw[, 1:9]
D18 <- D18_raw
## Cleaning D15 & D18
name_mapping <- c("id", "year.of.release", "#.of.pieces", "#.of.minifigures") # Renaming variables to align with JB
new_names <- c("setID", "year", "pieces", "minifigs")
matching_positions_D15 <- match(names(D15), name_mapping)
matching_positions_D18 <- match(names(D18), name_mapping)
names(D15)[!is.na(matching_positions_D15)] <- new_names[matching_positions_D15[!is.na(matching_positions_D15)]]
names(D18)[!is.na(matching_positions_D18)] <- new_names[matching_positions_D18[!is.na(matching_positions_D18)]]
D15 <- convert_to_integer(D15, c("year", "pieces", "minifigs")) # Converting variable types to align with JB
D18 <- convert_to_integer(D18, c("year", "pieces", "minifigs"))
months18 <- c("2018-01-01",
"2018-02-01",
"2018-03-01",
"2018-04-01",
"2018-05-01",
"2018-06-01",
"2018-07-01",
"2018-08-01",
"2018-09-01",
"2018-10-01",
"2018-11-01",
"2018-12-01") # Generating price columns
months19 <- c("2019-01-01",
"2019-02-01",
"2019-03-01",
"2019-04-01")
D18[, months18] <- sapply(D18[, months18], as.numeric)
D18$price2018 <- round(rowMeans(D18[, months18], na.rm = TRUE), 2)
D18[, months19] <- sapply(D18[, months19], as.numeric)
D18$price2019 <- round(rowMeans(D18[, months19], na.rm = TRUE), 2)
names(D15)[names(D15) == "Secondary.market.prices.of.new.sets.in.2015"] <- "price2015"
names(D15)[names(D15) == "Primary.market.price.at.release"] <- "RRP"
D15 <- D15 %>%
select(-matches("Secondary"))
D18 <- D18 %>%
select(-matches("-"))
D15$price2015 <- ifelse(D15$price2015 == 0, NA, D15$price2015)
D18$price2018 <- ifelse(D18$price2018 == 0, NA, D18$price2018)
D18$price2019 <- ifelse(D18$price2019 == 0, NA, D18$price2019)
## Fixing mismatched ID
# mismatch_IDs(D15, D18) # 1 conflict
D18$setID <- sub("^COMCON033$", "COMCON", D18$setID)
##
##
## mrpantherson
##
##
## Loading the data
MP_raw <- read_csv("/Users/samuellove/Documents/UC/23S3/DATA601/Data/Kaggle/lego-sets.csv")
MP <- MP_raw
## Changing columns to align with JB
names(MP)[names(MP) == c("id", "parts", "mean_price")] <- c("setID", "pieces", "price2022")
MP <- convert_to_integer(MP, c("year", "pieces"))
## Removing superfluous variables
MP <- MP %>%
select(-matches("_"))
## Expanding the themes aligning with JB
MP <- MP %>%
separate(category, into = c("theme", "subtheme"), sep = " > ", extra = "merge", fill = "right")
## Fixing setIDs
MP$setID <- sub("-1.*$", "", MP$setID)
## Tidying columns
MP$price2022 <- ifelse(MP$price2022 == 0, NA, MP$price2022)
##
##
## Merged
##
##
# Joining D15 and D18 into Ds
Ds = merge(D15, D18, all = TRUE)
# Joining Ds and MP into DsMP
DsMP = merge(Ds, MP, all = TRUE)
# Joining DsMP and JB into Merged
Merged = merge(DsMP, JB, all = TRUE)
##
##
## Supplementary Data
##
##
# Creating columns that adjust for inflation (to 2022 value)
# https://www.minneapolisfed.org/about-us/monetary-policy/inflation-calculator
Merged$price2015_adj <- Merged$price2015 * 1.23
Merged$price2018_adj <- Merged$price2018 * 1.17
Merged$price2019_adj <- Merged$price2019 * 1.14
LegoThemes <- "https://en.wikipedia.org/wiki/List_of_Lego_themes" # We can scrape the table from Wikipedia
html <- read_html(LegoThemes)
tables <- html %>% html_nodes("table.wikitable") %>% html_table(fill = TRUE)
dfs <- lapply(tables, as.data.frame)
themesCategorised <- bind_rows(dfs)
themesCategorised <- themesCategorised %>%
select(Name, Licensed)
themesCategorised <- themesCategorised %>%
mutate(Name = str_replace_all(Name, "\\[\\d+\\]", ""))
themesCategorised$Name <- sub("^Lego ", "", themesCategorised$Name)
themesCategorised <- themesCategorised %>%
rename(theme = Name) %>%
rename(licensed = Licensed)
# Categorising into licensed, combo, and original
themesCategorised <- themesCategorised %>%
mutate(licensed = case_when(
grepl("Lego$", licensed) ~ "Original",
grepl("Lego,?\\s?.*", licensed) ~ "Combo",
TRUE ~ "Licensed"
))
themesCategorised$licensed
Merged <- left_join(Merged, themesCategorised, by = "theme", relationship = "many-to-many")
Merged$licensed
write.csv(Merged, "Merged", row.names = FALSE)
shiny::runApp('UC/23S3/DATA601/Code/Shiny')
shiny::runApp()
